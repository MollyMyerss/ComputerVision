import os
import numpy as np
import imageio.v3 as iio
import matplotlib.pyplot as plt

from sobel_edge_detector import sobel_edge_detector
from directional_edge_detector import directional_edge_detector

class Part3_SobelEdge:
    def __init__(self,
                 img_path: str = "images/LowContrast.jpg",
                 sobel_thresh: int = 60,
                 direction_range: tuple[float, float] = (40.0, 50.0),
                 canny_low: int = 100,
                 canny_high: int = 200):
        self.img_path = img_path
        self.sobel_thresh = int(sobel_thresh)
        self.direction_range = (float(direction_range[0]), float(direction_range[1]))
        self.canny_low = int(canny_low)
        self.canny_high = int(canny_high)

    # Convert to grayscale if needed
    def _to_gray(self, img: np.ndarray) -> np.ndarray:
        if img.ndim == 3:
            img = (0.299*img[...,0] + 0.587*img[...,1] + 0.114*img[...,2]).astype(np.uint8)
        else:
            img = img.astype(np.uint8)
        return img

    # Read image and convert to grayscale if needed
    def _read_gray(self) -> np.ndarray:
        return self._to_gray(iio.imread(self.img_path))

    # Run the processing and display/save results
    def run(self, show: bool = True, save_dir: str | None = "outputs"):
        img = self._read_gray()

        sobel_map = sobel_edge_detector(img, threshold=self.sobel_thresh)

        dir_map = directional_edge_detector(img, self.direction_range)

        canny_img = None
        try:
            import cv2
            canny_img = cv2.Canny(img, self.canny_low, self.canny_high)
        except Exception:
            pass  

        sobel_edges = int((sobel_map > 0).sum())
        dir_edges = int((dir_map > 0).sum())
        print(f"Sobel threshold = {self.sobel_thresh}, edge pixels = {sobel_edges}")
        print(f"Directional range = {self.direction_range}°, edge pixels = {dir_edges}")
        if canny_img is not None:
            print(f"Canny thresholds = ({self.canny_low}, {self.canny_high}), "
                  f"edge pixels = {int((canny_img > 0).sum())}")
        else:
            print("Canny: OpenCV not installed; skipping.")

        if canny_img is not None:
            fig, axes = plt.subplots(1, 3, figsize=(12, 4))
            axes[0].imshow(sobel_map, cmap="gray"); axes[0].set_title(f"Sobel Edge Detector ≥ {self.sobel_thresh}")
            axes[1].imshow(dir_map,   cmap="gray"); axes[1].set_title(f"Directional Edge Filter ~45° → {self.direction_range}°")
            axes[2].imshow(canny_img, cmap="gray"); axes[2].set_title(f"Canny Edge Detector ({self.canny_low},{self.canny_high})")
            for ax in axes: ax.axis("off")
        else:
            fig, axes = plt.subplots(1, 2, figsize=(8, 4))
            axes[0].imshow(sobel_map, cmap="gray"); axes[0].set_title(f"Sobel Edge Detector ≥ {self.sobel_thresh}")
            axes[1].imshow(dir_map,   cmap="gray"); axes[1].set_title(f"Directional Edge Filter ~45° → {self.direction_range}°")
            for ax in axes: ax.axis("off")

        fig.tight_layout()

        if save_dir is not None:
            os.makedirs(save_dir, exist_ok=True)
            out_path = os.path.join(save_dir, "p3_summary.png")
            fig.savefig(out_path, dpi=200)
            print(f"[saved] ./{out_path}")

        if show:
            plt.show()
        else:
            plt.close(fig)


if __name__ == "__main__":
    Part3_SobelEdge(
        img_path="images/LowContrast.jpg",
        sobel_thresh=60,
        direction_range=(35.0, 55.0),  # approx 45 degrees
        canny_low=100, canny_high=200
    ).run(show=True, save_dir="outputs")
